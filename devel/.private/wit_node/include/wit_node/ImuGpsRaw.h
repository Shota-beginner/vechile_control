// Generated by gencpp from file wit_node/ImuGpsRaw.msg
// DO NOT EDIT!


#ifndef WIT_NODE_MESSAGE_IMUGPSRAW_H
#define WIT_NODE_MESSAGE_IMUGPSRAW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace wit_node
{
template <class ContainerAllocator>
struct ImuGpsRaw_
{
  typedef ImuGpsRaw_<ContainerAllocator> Type;

  ImuGpsRaw_()
    : header()
    , time(0.0)
    , acc()
    , gyro()
    , rpy()
    , mag()
    , ps()
    , temperature(0.0)
    , altitude(0.0)
    , ap(0.0)
    , latitude(0.0)
    , longtitude(0.0)
    , gpsh(0.0)
    , gpsy(0.0)
    , gpsv(0.0)
    , quarternion()
    , sn(0)
    , dop()  {
    }
  ImuGpsRaw_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , acc(_alloc)
    , gyro(_alloc)
    , rpy(_alloc)
    , mag(_alloc)
    , ps(_alloc)
    , temperature(0.0)
    , altitude(0.0)
    , ap(0.0)
    , latitude(0.0)
    , longtitude(0.0)
    , gpsh(0.0)
    , gpsy(0.0)
    , gpsv(0.0)
    , quarternion(_alloc)
    , sn(0)
    , dop(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _acc_type;
  _acc_type acc;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gyro_type;
  _gyro_type gyro;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rpy_type;
  _rpy_type rpy;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _mag_type;
  _mag_type mag;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _ps_type;
  _ps_type ps;

   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _ap_type;
  _ap_type ap;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longtitude_type;
  _longtitude_type longtitude;

   typedef double _gpsh_type;
  _gpsh_type gpsh;

   typedef double _gpsy_type;
  _gpsy_type gpsy;

   typedef double _gpsv_type;
  _gpsv_type gpsv;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _quarternion_type;
  _quarternion_type quarternion;

   typedef uint8_t _sn_type;
  _sn_type sn;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dop_type;
  _dop_type dop;





  typedef boost::shared_ptr< ::wit_node::ImuGpsRaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wit_node::ImuGpsRaw_<ContainerAllocator> const> ConstPtr;

}; // struct ImuGpsRaw_

typedef ::wit_node::ImuGpsRaw_<std::allocator<void> > ImuGpsRaw;

typedef boost::shared_ptr< ::wit_node::ImuGpsRaw > ImuGpsRawPtr;
typedef boost::shared_ptr< ::wit_node::ImuGpsRaw const> ImuGpsRawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wit_node::ImuGpsRaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wit_node::ImuGpsRaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wit_node::ImuGpsRaw_<ContainerAllocator1> & lhs, const ::wit_node::ImuGpsRaw_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.acc == rhs.acc &&
    lhs.gyro == rhs.gyro &&
    lhs.rpy == rhs.rpy &&
    lhs.mag == rhs.mag &&
    lhs.ps == rhs.ps &&
    lhs.temperature == rhs.temperature &&
    lhs.altitude == rhs.altitude &&
    lhs.ap == rhs.ap &&
    lhs.latitude == rhs.latitude &&
    lhs.longtitude == rhs.longtitude &&
    lhs.gpsh == rhs.gpsh &&
    lhs.gpsy == rhs.gpsy &&
    lhs.gpsv == rhs.gpsv &&
    lhs.quarternion == rhs.quarternion &&
    lhs.sn == rhs.sn &&
    lhs.dop == rhs.dop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wit_node::ImuGpsRaw_<ContainerAllocator1> & lhs, const ::wit_node::ImuGpsRaw_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wit_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wit_node::ImuGpsRaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wit_node::ImuGpsRaw_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wit_node::ImuGpsRaw_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec87fc8ac189ad006ecd7f01525e10f2";
  }

  static const char* value(const ::wit_node::ImuGpsRaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec87fc8ac189ad00ULL;
  static const uint64_t static_value2 = 0x6ecd7f01525e10f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wit_node/ImuGpsRaw";
  }

  static const char* value(const ::wit_node::ImuGpsRaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 time\n"
"float64[] acc\n"
"float64[] gyro\n"
"float64[] rpy\n"
"float64[] mag\n"
"uint16[]  ps #port state\n"
"float64   temperature\n"
"float64   altitude\n"
"float64   ap #atmosphere pressure\n"
"float64   latitude\n"
"float64   longtitude\n"
"float64   gpsh #gps height\n"
"float64   gpsy #gps yaw\n"
"float64   gpsv #gps velocity\n"
"float64[] quarternion\n"
"uint8     sn #satelites number\n"
"float64[] dop\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::wit_node::ImuGpsRaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.acc);
      stream.next(m.gyro);
      stream.next(m.rpy);
      stream.next(m.mag);
      stream.next(m.ps);
      stream.next(m.temperature);
      stream.next(m.altitude);
      stream.next(m.ap);
      stream.next(m.latitude);
      stream.next(m.longtitude);
      stream.next(m.gpsh);
      stream.next(m.gpsy);
      stream.next(m.gpsv);
      stream.next(m.quarternion);
      stream.next(m.sn);
      stream.next(m.dop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuGpsRaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wit_node::ImuGpsRaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wit_node::ImuGpsRaw_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyro[i]);
    }
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "mag[]" << std::endl;
    for (size_t i = 0; i < v.mag.size(); ++i)
    {
      s << indent << "  mag[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mag[i]);
    }
    s << indent << "ps[]" << std::endl;
    for (size_t i = 0; i < v.ps.size(); ++i)
    {
      s << indent << "  ps[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.ps[i]);
    }
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "ap: ";
    Printer<double>::stream(s, indent + "  ", v.ap);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longtitude: ";
    Printer<double>::stream(s, indent + "  ", v.longtitude);
    s << indent << "gpsh: ";
    Printer<double>::stream(s, indent + "  ", v.gpsh);
    s << indent << "gpsy: ";
    Printer<double>::stream(s, indent + "  ", v.gpsy);
    s << indent << "gpsv: ";
    Printer<double>::stream(s, indent + "  ", v.gpsv);
    s << indent << "quarternion[]" << std::endl;
    for (size_t i = 0; i < v.quarternion.size(); ++i)
    {
      s << indent << "  quarternion[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.quarternion[i]);
    }
    s << indent << "sn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sn);
    s << indent << "dop[]" << std::endl;
    for (size_t i = 0; i < v.dop.size(); ++i)
    {
      s << indent << "  dop[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dop[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIT_NODE_MESSAGE_IMUGPSRAW_H
