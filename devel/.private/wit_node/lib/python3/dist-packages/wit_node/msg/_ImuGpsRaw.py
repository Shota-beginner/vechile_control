# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wit_node/ImuGpsRaw.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ImuGpsRaw(genpy.Message):
  _md5sum = "ec87fc8ac189ad006ecd7f01525e10f2"
  _type = "wit_node/ImuGpsRaw"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float64 time
float64[] acc
float64[] gyro
float64[] rpy
float64[] mag
uint16[]  ps #port state
float64   temperature
float64   altitude
float64   ap #atmosphere pressure
float64   latitude
float64   longtitude
float64   gpsh #gps height
float64   gpsy #gps yaw
float64   gpsv #gps velocity
float64[] quarternion
uint8     sn #satelites number
float64[] dop



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','time','acc','gyro','rpy','mag','ps','temperature','altitude','ap','latitude','longtitude','gpsh','gpsy','gpsv','quarternion','sn','dop']
  _slot_types = ['std_msgs/Header','float64','float64[]','float64[]','float64[]','float64[]','uint16[]','float64','float64','float64','float64','float64','float64','float64','float64','float64[]','uint8','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,acc,gyro,rpy,mag,ps,temperature,altitude,ap,latitude,longtitude,gpsh,gpsy,gpsv,quarternion,sn,dop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuGpsRaw, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = 0.
      if self.acc is None:
        self.acc = []
      if self.gyro is None:
        self.gyro = []
      if self.rpy is None:
        self.rpy = []
      if self.mag is None:
        self.mag = []
      if self.ps is None:
        self.ps = []
      if self.temperature is None:
        self.temperature = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.ap is None:
        self.ap = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longtitude is None:
        self.longtitude = 0.
      if self.gpsh is None:
        self.gpsh = 0.
      if self.gpsy is None:
        self.gpsy = 0.
      if self.gpsv is None:
        self.gpsv = 0.
      if self.quarternion is None:
        self.quarternion = []
      if self.sn is None:
        self.sn = 0
      if self.dop is None:
        self.dop = []
    else:
      self.header = std_msgs.msg.Header()
      self.time = 0.
      self.acc = []
      self.gyro = []
      self.rpy = []
      self.mag = []
      self.ps = []
      self.temperature = 0.
      self.altitude = 0.
      self.ap = 0.
      self.latitude = 0.
      self.longtitude = 0.
      self.gpsh = 0.
      self.gpsy = 0.
      self.gpsv = 0.
      self.quarternion = []
      self.sn = 0
      self.dop = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      buff.write(_get_struct_d().pack(_x))
      length = len(self.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.acc))
      length = len(self.gyro)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.gyro))
      length = len(self.rpy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.rpy))
      length = len(self.mag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.mag))
      length = len(self.ps)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.ps))
      _x = self
      buff.write(_get_struct_8d().pack(_x.temperature, _x.altitude, _x.ap, _x.latitude, _x.longtitude, _x.gpsh, _x.gpsy, _x.gpsv))
      length = len(self.quarternion)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.quarternion))
      _x = self.sn
      buff.write(_get_struct_B().pack(_x))
      length = len(self.dop)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.dop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.gyro = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rpy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mag = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ps = s.unpack(str[start:end])
      _x = self
      start = end
      end += 64
      (_x.temperature, _x.altitude, _x.ap, _x.latitude, _x.longtitude, _x.gpsh, _x.gpsy, _x.gpsv,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quarternion = s.unpack(str[start:end])
      start = end
      end += 1
      (self.sn,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dop = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      buff.write(_get_struct_d().pack(_x))
      length = len(self.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.acc.tostring())
      length = len(self.gyro)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.gyro.tostring())
      length = len(self.rpy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rpy.tostring())
      length = len(self.mag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.mag.tostring())
      length = len(self.ps)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.ps.tostring())
      _x = self
      buff.write(_get_struct_8d().pack(_x.temperature, _x.altitude, _x.ap, _x.latitude, _x.longtitude, _x.gpsh, _x.gpsy, _x.gpsv))
      length = len(self.quarternion)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.quarternion.tostring())
      _x = self.sn
      buff.write(_get_struct_B().pack(_x))
      length = len(self.dop)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.dop.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.gyro = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rpy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mag = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ps = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 64
      (_x.temperature, _x.altitude, _x.ap, _x.latitude, _x.longtitude, _x.gpsh, _x.gpsy, _x.gpsv,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quarternion = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.sn,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dop = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
